pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
-- sokobubble v0.9.1
-- (c) 2025 eriban

level_defs={{
 name="bubbles",
 mapdef={0,8,7,7},
 id=1
},{
 name="targets",
 mapdef={7,8,7,7},
 id=2
},{
 name="order",
 mapdef={7,15,9,6},
 id=3
},{
 name="overlap",
 mapdef={0,0,8,8},
 id=4
},{
 name="swap",
 mapdef={16,0,8,8},
 id=5
},{
 name="barrier",
 mapdef={44,8,8,7},
 id=6
},{
 name="espresso",
 mapdef={36,8,8,7},
 id=7
},{
 name="enclosed",
 mapdef={48,0,8,8},
 id=8
},{
 name="swap 2",
 mapdef={21,8,8,7},
 id=9
},{
 name="coffee",
 mapdef={59,8,8,7},
 id=16
},{
 name="rgb",
 mapdef={56,0,8,8},
 id=10
},{
 name="foursome",
 mapdef={14,8,7,7},
 id=11
},{
 name="skull",
 mapdef={80,0,8,8},
 id=15
},{
 name="squares",
 mapdef={8,0,8,8},
 id=12
},{
 name="center",
 mapdef={40,0,8,8},
 id=14
},{
 name="cross",
 mapdef={24,0,8,8},
 id=13
},{
-- name="wip-rgb-2",
-- mapdef={64,0,8,8}
--},{
-- name="wip",
-- mapdef={32,0,8,8}
--},
 name="the end",
 mapdef={0,15,7,6},
 id=99,
 ini_bubble=1
},
--{
-- name="wip-rgb-2",
-- mapdef={64,0,8,8}
--}
}
max_level_id=#level_defs

--sprite flags
flag_player=0
flag_wall=1
flag_box=2
flag_tgt=3
flag_bub=4

colors={9,8,3,12}
colors[0]=0
hi_colors={10,14,11,6}
lo_colors={4,2,1,1}

easymode=true

function level_id(level_idx)
 --level id allows reset of
 --level progress after level
 --changed

 return (
  level_defs[level_idx].id
  or level_idx
 )
end

function draw_level_info(
 lvl_idx,y,score
)
 rectfill(0,y,127,y+6,5)

 if (
  lvl_idx==#level_defs
  and score==nil
 ) then
  print("stats",1,y+1,0)
  return
 end

 print(
  "l"..lvl_idx..":"
  ..level_defs[lvl_idx].name,
  1,y+1,0
 )

 local s="#="
 if score then
  s..=score.."/"
 end
 local hi=stats:get_hi(lvl_idx)
 if hi>0 then
  s..=hi
 else
  s..="-"
 end

 print(s,128-#s*4,y+1,0)
end

function delta_rot(r1,r2)
 local d=r2-r1
 if d>180 then
  d-=360
 elseif d<=-180 then
  d+=360
 end
 return d
end

function box_color(si)
 return si\16-3
end

function tgt_color(si)
 local col=si%16
 if si==77 or col==8 then
  return -1
 elseif si==95 then
  return 1 --special case
 elseif col==5 then
  return si\16-3
 end
 return col-8
end

function bub_color(si)
 local col=si%16
 if col<=4 then
  return col
 else
  return si\16-3
 end
end

function box_at(x,y,game)
 for box in all(game.boxes) do
  if box:is_at(x,y) then
   return box
  end
 end
end

function new_object(class)
 local obj=setmetatable(
  {},class
 )
 class.__index=class
 return obj
end

--wrap coroutine with a name to
--facilitate debugging crashes
function cowrap(
 name,coroutine,...
)
 return {
  name=name,
  coroutine=cocreate(coroutine),
  args={...}
 }
end

--returns true when routine died
function coinvoke(wrapped_cr)
 local cr=wrapped_cr.coroutine
 if not coresume(
  cr,
  wrapped_cr.args
 ) then
  printh(
   "coroutine "
   ..wrapped_cr.name
   .." crashed"
  )
  while true do end
 end
 return costatus(cr)=="dead"
end

function do_nothing()
end

function wait(steps)
 for i=1,steps do
  yield()
 end
end

function printbig(s,x0,y0,c)
 print(s,x0,y0,c)
 for y=4,0,-1 do
  local yd=y0+y*2
  for x=#s*4-1,0,-1 do
   local xd=x0+x*2
   rectfill(
    xd,yd,xd+1,yd+1,
    pget(x0+x,y0+y)
   )
  end
 end
end

function rect3d(
 x,y,x2,y2,c,chi,clo
)
 rect(x-1,y-1,x2+1,y2+1,clo)
 rect(x-1,y-1,x2,y2,chi)
 rectfill(x,y,x2,y2,c)
end

dialog={}
function dialog:new(txt,y)
 local o=new_object(self)

 o.txt=txt
 o.y=y

 return o
end

function dialog:draw()
 local hw=#self.txt*4+2
 local y=self.y

 rect3d(
  64-hw,y,63+hw,y+17,5,6,0
 )
 printbig(self.txt,67-hw,y+4,0)
end

function level_done_anim(args)
 local state=args[1]
 wait(30)
 state.dialog=dialog:new(
  "solved!",58
 )
 sfx(4)
 wait(90)

 if state.new_hi then
  state.dialog=dialog:new(
   "new hi!",58
  )
  sfx(4)
  wait(90)
 end
 
 start_level(_game.level.idx+1)
 yield() --allow anim swap
end

function animate_level_done(
 new_hi
)
 local state={
  dialog=nil,new_hi=new_hi
 }
 local anim=cowrap(
  "level_done",
  level_done_anim,
  state
 )
 anim.draw=function()
  if state.dialog then
   state.dialog:draw()
  end
 end
 return anim
end

function retry_anim()
 sfx(2)
 wait(30)
 if _game.mov_cnt==0 then
  --start completely afresh
  scene=_title
 else
  start_level(_game.level.idx)
 end
 yield() --allow anim swap
end

function animate_retry()
 local anim=cowrap(
  "retry",retry_anim
 )
 anim.draw=do_nothing
 return anim
end
-->8
stats={}
vmajor=0
vminor=1

function stats:new()
 local o=new_object(self)

 cartdata("eriban_sokobubble")
 if (
  dget(0)!=vmajor or
  dget(1)<vminor
 ) then
  --reset incompatible data
  for l=1,max_level_id do
   dset(1+l,0)
  end
 end

 dset(0,vmajor)
 dset(1,vminor)

 --find the maximum level the
 --player can play
 o.max_lvl_idx=1
 while (
  o:is_done(o.max_lvl_idx)
 ) do
  o.max_lvl_idx+=1
 end

 return o
end

function stats:mark_done(
 lvl_idx,num_moves
)
 local hi=self:get_hi(lvl_idx)
 if hi==0 or num_moves<hi then
  dset(
   1+level_id(lvl_idx),
   num_moves
  )

  if (
   lvl_idx==self.max_lvl_idx
  ) then
   self.max_lvl_idx+=1
  end

  return true
 end
end

function stats:is_done(lvl_idx)
 return self:get_hi(lvl_idx)>0
end

function stats:get_hi(lvl_idx)
 return dget(1+level_id(lvl_idx))
end

levelmenu={}
function levelmenu:new()
 local o=new_object(self)

 o.ncols=4
 o.nrows=(
  #level_defs+o.ncols-1
 )\o.ncols
 o.cx=0
 o.cy=0

 return o
end

function levelmenu:_lvl_idx(x,y)
 local idx=1+y*4+x
 if idx>#level_defs then
  idx=nil
 end
 return idx
end

function levelmenu:update()
 local cx=self.cx
 local cy=self.cy

 if btnp(➡️) then
  cx=(cx+1)%self.ncols
 elseif btnp(⬅️) then
  cx=(cx+self.ncols-1)%self.ncols
 elseif btnp(⬆️) then
  cy=(cy+self.nrows-1)%self.nrows
 elseif btnp(⬇️) then
  cy=(cy+1)%self.nrows
 else
  if btnp(❎) then
   local lvl_idx=self:_lvl_idx(
    cx,cy
   )
   if lvl_idx<#level_defs then
    start_level(lvl_idx)
   else
    scene=_statsview
   end
  end
  return
 end

 local lvl_idx=self:_lvl_idx(
  cx,cy
 )
 if lvl_idx==nil then
  sfx(1)
  return
 end
 if (
  lvl_idx<=_stats.max_lvl_idx
 ) then
  self.cx=cx
  self.cy=cy
 else
  sfx(1)
  return
 end
end

function levelmenu:draw()
 cls()

 spr(135,32,0,8,2)

 for i=1,#level_defs do
  local row=(i-1)\self.ncols
  local col=(i-1)%self.ncols

  local x=col*24+16
  local y=row*20+20
  local focus=(
   col==self.cx and row==self.cy
  )

  rect3d(
   x,y,x+17,y+13,
   focus and 8 or 1,13,2
  )

  local s=""..i
  local c=0
  if i==_stats.max_lvl_idx then
   c=5
  elseif i<_stats.max_lvl_idx then
   c=2
  end
  if i<#level_defs then
   printbig(s,x+10-#s*4,y+2,c)
  else
   pal(5,c)
   spr(172,x+1,y+1,2,2)
   pal()
  end
  if focus then
   draw_level_info(i,120)
  end
 end
end

statsview={}
function statsview:new()
 local o=new_object(self)

 return o
end

function statsview:update()
 if btnp(❎) then
  scene=_levelmenu
 end
end

function statsview:draw()
 cls()

 spr(135,32,0,8,2)

 rect3d(1,22,126,107,1,13,2)

 for i=1,#level_defs-1 do
  local x=((i-1)\12)*64
  local y=((i-1)%12)*7+24
  print(
   ""..i.."."..
   level_defs[i].name,
   x+6-(i\10)*4,y,13
  )
  local s="".._stats:get_hi(i)
  print(s,x+62-#s*4,y,13)
 end
end

box={}
function box:new(x,y,c)
 local o=new_object(self)

 o.sx=x*8
 o.sy=y*8
 o.c=c

 return o
end

function box:is_at(x,y)
 return (
  self.sx==x*8 and self.sy==y*8
 )
end

function box:on_tgt(level)
 if (
  self.sx%8!=0 or self.sy%8!=0
 ) then
  return false
 end
 local tgt=level:tgt_at(
  self.sx\8,self.sy\8
 )
 return tgt==-1 or tgt==self.c
end

function box:_push(mov)
 self.sx+=mov.dx
 self.sy+=mov.dy
end
-->8
--player

player={}
function player:new(x,y,bubble)
 local o=new_object(self)

 o.sx=x*8
 o.sy=y*8
 o.bubble=bubble
 o.sd=0
 o.dx=0
 o.dy=0
 o.rot=180
 o.tgt_rot=nil

 return o
end

function player:_rotate()
 local drot=delta_rot(
  self.rot,self.tgt_rot
 )
 drot=max(min(drot,10),-10)

 self.rot=(self.rot+drot)%360
 if abs(drot)<1 then
  self.tgt_rot=nil
 end
end

function player:_forward(mov)
 self.sx+=mov.dx
 self.sy+=mov.dy
 self.sd=(
  self.sd+3+mov.dx+mov.dy
 )%3
end

function player:_backward(mov)
 self.sx-=mov.dx
 self.sy-=mov.dy
 self.sd=(
  self.sd+3-mov.dx-mov.dy
 )%3
end

function blocked_move_anim(args)
 local mov=args[1]
 local plyr=args[2]

 for i=1,mov.blocked do
  plyr:_forward(mov)
  yield()
 end

 sfx(1)
 yield()

 for i=1,mov.blocked do
  plyr:_backward(mov)
  yield()
 end
end

function plain_move_anim(args)
 local mov=args[1]
 local plyr=args[2]

 for i=1,8 do
  plyr:_forward(mov)
  if i!=8 then yield() end
 end
end

function push_move_anim(args)
 local mov=args[1]
 local plyr=args[2]

 local start=1
 if (
  plyr.sx%8!=0 or plyr.sy%8!=0
 ) then
  --continuing prev push move
  start=3
 end

 for i=start,10 do
  plyr:_forward(mov)
  if i==2 then
   sfx(0)
  elseif i>2 then
   mov.push_box:_push(mov)
  end
  if i!=10 then yield() end
 end

 if (
  plyr.movq!=nil
  and plyr.movq.blocked==0
  and plyr.movq.rot==plyr.rot
 ) then
  --continue into next move
  plyr:_start_queued_move(_game)
  yield() --allow anim swap
 else
  --retreat after placing box
  for i=1,2 do
   plyr:_backward(mov)
   yield()
  end
 end
end

function player:_move(game)
 if coinvoke(self.mov.anim) then
  self.mov=nil
 end

 if (
  self.sx%8==0 and self.sy%8==0
 ) then
  local bub=game.level:bubble(
   self.sx\8,self.sy\8
  )
  if (
   bub!=nil and bub!=self.bubble
  ) then
   self.bubble=bub
   sfx(5)
  end
 end
end

--checks if move is blocked
--if so, returns num pixels
--that player can move. returns
--zero otherwise
function player:_is_blocked(
 mov,game
)
 local x1=mov.dst_x
 local y1=mov.dst_y

 local lvl=game.level
 local ws=lvl:wall_size(x1,y1)
 if ws!=0 then
  return 5-ws\2
 end

 local box=box_at(x1,y1,game)
 if (
  box==nil
  and self.mov!=nil
  and self.mov.rot==mov.rot
 ) then
  --pushed box is not (always)
  --bound by box_at
  box=self.mov.push_box
 end

 if box!=nil then
  if box.c!=mov.src_c then
   --cannot move this box color
   return 2
  end
  local x2=x1+mov.dx
  local y2=y1+mov.dy
  if (
   lvl:is_wall(x2,y2)
   or box_at(x2,y2,game)!=nil
  ) then
   --no room to push box
   return 2
  end
 end

 return 0
end

function player:_check_move(
 mov,game
)
 if self.mov!=nil then
  mov.src_x=self.mov.dst_x
  mov.src_y=self.mov.dst_y
  mov.src_c=self.mov.dst_c
 else
  mov.src_x=self.sx\8
  mov.src_y=self.sy\8
  mov.src_c=self.bubble
 end

 local x1=mov.src_x+mov.dx
 local y1=mov.src_y+mov.dy
 mov.dst_x=x1
 mov.dst_y=y1

 mov.blocked=self:_is_blocked(
  mov,game
 )
 if mov.blocked!=0 then
  mov.dst_x=mov.src_x
  mov.dst_y=mov.src_y
 end
 mov.dst_c=game.level:bubble(
  x1,y1
 ) or mov.src_c

 return mov
end

function player:_start_queued_move(
 game
)
 assert(self.movq!=nil)
 local mov=self.movq
 self.movq=nil

 mov.push_box=box_at(
  mov.dst_x,mov.dst_y,game
 )
 mov.ini_mov_cnt=game.mov_cnt
 mov.ini_rot=self.rot
 mov.ini_bubble=self.bubble

 local mov_cnt_delta=1
 if mov.blocked!=0 then
  mov.anim=cowrap(
   "blocked_move",
   blocked_move_anim,
   mov,self
  )
  mov_cnt_delta=0
 elseif mov.push_box!=nil then
  mov.anim=cowrap(
   "push_move",
   push_move_anim,
   mov,self
  )
  if easymode then
   self.last_push_mov=mov
  end
 else
  mov.anim=cowrap(
   "plain_move",
   plain_move_anim,
   mov,self
  )
 end

 game.mov_cnt=min(
  game.mov_cnt+mov_cnt_delta,
  999
 )

 self.mov=mov

 if mov.rot!=self.rot then
  if (
   mov.rot%180==self.rot%180
  ) then
   --skip 180-turn
   self.rot=mov.rot
  else
   self.tgt_rot=mov.rot
  end
 end
end

function player:_undo(game)
 local mov=self.last_push_mov
 if mov==nil then
  return false
 end

 self.sx=mov.src_x*8
 self.sy=mov.src_y*8
 self.rot=mov.ini_rot
 self.bubble=mov.ini_bubble
 mov.push_box.sx=mov.dst_x*8
 mov.push_box.sy=mov.dst_y*8
 game.mov_cnt=mov.ini_mov_cnt

 self.last_push_mov=nil

 return true
end

function player:update(game)
 --allow player to queue a move
 local req_mov=nil
 if btnp(➡️) then
  req_mov={rot=90,dx=1,dy=0}
 elseif btnp(⬅️) then
  req_mov={rot=270,dx=-1,dy=0}
 elseif btnp(⬆️) then
  req_mov={rot=0,dx=0,dy=-1}
 elseif btnp(⬇️) then
  req_mov={rot=180,dx=0,dy=1}
 end
 if req_mov!=nil then
  self.movq=self:_check_move(
   req_mov,game
  )
 end

 --handle level retry
 if btn(❎) then
  if self.retry_cnt then
   self.retry_cnt+=1
   if self.retry_cnt>30 then
    game.anim=animate_retry()
   end
  end
  return
 else
  if (
   self.retry_cnt
   and self.retry_cnt>0
  ) then
   if not self:_undo(game) then
    sfx(1)
   end
  end

  self.retry_cnt=0
 end

 if (
  self.movq!=nil
  and self.mov==nil
 ) then
  self:_start_queued_move(game)
 end

 if self.tgt_rot then
  self:_rotate()
 elseif self.mov then
  self:_move(game)
 end
end

function player:draw(game)
 local lvl=game.level
 local subrot=self.rot%90
 local row=(self.rot%180)\90
 local si
 if subrot==0 then
  si=16+row*16+self.sd
 else
  local d=(subrot+15)\30
  if d==0 or d==3 then
   si=16+((row+d\3)%2)*16+self.sd
  else
   si=16+row*16+2+d
  end
 end

 local idx=self.bubble
 if (
  self.retry_cnt
  and self.retry_cnt>0
 ) then
  idx=self.retry_cnt\2%#colors
 end
 pal(1,0)
 if idx>0 then
  pal(5,colors[idx])
  pal(6,hi_colors[idx])
 end

 spr(
  si,
  lvl.sx0+self.sx,
  lvl.sy0+self.sy
 )
 pal()
end

-->8
--level

level={}
function level:new(lvl_index)
 local o=new_object(self)

 local lvl_def=level_defs[
  lvl_index
 ]
 o.idx=lvl_index
 o.x0=lvl_def.mapdef[1]
 o.y0=lvl_def.mapdef[2]
 o.ncols=lvl_def.mapdef[3]
 o.nrows=lvl_def.mapdef[4]
 o.sx0=64-4*o.ncols
 o.sy0=67-4*o.nrows
 o.lvl_def=lvl_def

 o.id=level_id(lvl_index)

 return o
end

function level:_sprite(mx,my)
 return mget(
  self.x0+mx,self.y0+my
 )
end

function level:_cellhasflag(
 mx,my,flag
)
 return fget(
  self:_sprite(mx,my),flag
 )
end

function level:is_wall(x,y)
 return self:_cellhasflag(
  x,y,flag_wall
 )
end

function level:wall_size(x,y)
 local si=self:_sprite(x,y)
 local row=si\16
 if row==3 then
  return 8
 elseif row==2 and si>36 then
  return 6
 else
  return 0
 end
end

function level:tgt_at(x,y)
 local si=self:_sprite(x,y)
 if fget(si,flag_tgt) then
  return tgt_color(si)
 end
 return nil
end

function level:bubble(x,y)
 local si=self:_sprite(x,y)
 if fget(si,flag_bub) then
  return bub_color(si)
 end
 return nil
end

function level:add_objects(game)
 for x=0,self.ncols-1 do
  for y=0,self.nrows-1 do
   local si=self:_sprite(x,y)
   if fget(si,flag_player) then
    local bubble=(
     self.lvl_def.ini_bubble
     or 0
    )
    game.player=player:new(
     x,y,bubble
    )
   elseif fget(si,flag_box) then
    add(
     game.boxes,
     box:new(x,y,box_color(si))
    )
   end
  end
 end

 return s
end

function level:_draw_fixed(game)
 for x=0,self.ncols-1 do
  for y=0,self.nrows-1 do
   local si=self:_sprite(x,y)
   local dsi=0
   if fget(si,flag_wall) then
    dsi=si
   elseif fget(si,flag_tgt) then
    local c=tgt_color(si)
    local viz=(
     game.mov_cnt==0
     or game.player.bubble==c
     or c==-1
    )
    if self:_box_on_tgt_at(
     x,y,game
    ) then
     if c==-1 then
      dsi=109
     elseif viz then
      dsi=c*16+62
     else
      dsi=125
     end
    elseif viz or easymode then
     dsi=si
    else
     dsi=93
    end
   end
   local sx=self.sx0+x*8
   local sy=self.sy0+y*8
   rectfill(sx,sy,sx+7,sy+7,5)
   if dsi!=0 then
    spr(dsi,sx,sy)
   end
  end
 end
end

function level:_draw_boxes(game)
 for box in all(game.boxes) do
  local si
  if (
   game.mov_cnt==0
   or game.player.bubble==box.c
  ) then
   si=48+box.c*16
  elseif easymode then
   si=55+box.c*16
  else
   si=127
  end
  spr(
   si,
   self.sx0+box.sx,
   self.sy0+box.sy
  )
 end
end

function level:_draw_bubbles()
 for x=0,self.ncols-1 do
  for y=0,self.nrows-1 do
   local si=self:_sprite(x,y)
   if fget(si,flag_bub) then
    local c=bub_color(si)
    spr(
     c*16+54,
     self.sx0+x*8,
     self.sy0+y*8
    )
   end
  end
 end
end

function level:draw(game)
 pal(15,0)
 self:_draw_fixed(game)
 self:_draw_boxes(game)
 self:_draw_bubbles()
 pal()

 draw_level_info(
  self.idx,0,game.mov_cnt
 )
end

function level:_box_on_tgt_at(
 x,y,game
)
 for box in all(game.boxes) do
  if (
   box:is_at(x,y)
   and box:on_tgt(self)
  ) then
   return true
  end
 end

 return false
end

function level:is_done(game)
 local old_cnt=game.box_cnt
 game.box_cnt=0

 for box in all(game.boxes) do
  if box:on_tgt(self) then
   game.box_cnt+=1
  end
 end

 if game.box_cnt>old_cnt then
  sfx(3)
 end

 return game.box_cnt==#game.boxes
end

-->8
--main

function _init()
 _title=title:new()
 _levelmenu=levelmenu:new()
 _stats=stats:new()
 _statsview=statsview:new()

 scene=_title
end

function _update60()
 scene:update()
end

function _draw()
 scene:draw()
end

function start_level(idx)
 _game=game:new(idx)
 scene=_game
end

title={}
function title:new()
 local o=new_object(self)

 o.car={x=60,dx=0.5,c=2}
 o.boxr={x=116}
 o.boxl={x=-8}

 return o
end

function title:update()
 if btnp(❎) then
  scene=_levelmenu
  return
 elseif btnp(⬅️) or btnp(➡️) then
  easymode=not easymode
 end

 local car=self.car
 car.x+=car.dx
 if car.dx>0 then
  if car.x>122 then
   car.dx=-car.dx
  elseif car.x>110 then
   local box=self.boxr
   box.x=car.x+6
   if not box.touched then
    box.touched=true
    sfx(0)
   end
  elseif car.x>78 then
   if car.c!=2 then sfx(5) end
   car.c=2
  elseif car.x>32 then
   self.boxl.x=4
   self.boxl.touched=false
  end
 else
  if car.x<7 then
   car.dx=-car.dx
  elseif car.x<19 then
   local box=self.boxl
   box.x=car.x-14
   if not box.touched then
    box.touched=true
    sfx(0)
   end
  elseif car.x<50 then
   if car.c!=4 then sfx(5) end
   car.c=4
  elseif car.x<95 then
   self.boxr.x=116
   self.boxr.touched=false
  end
 end
end

fillpats={
 0b1111111111111111,
 0b0111111111111111,
 0b0111111111011111,
 0b0101111111011111,
 0b0101111101011111,
 0b0101101101011111,
 0b0101101101011110,
 0b0101101001011110,
 0b0101101001011010,
 0b0001101001011010,
 0b0001101001001010,
 0b0000101001001010,
 0b0000101000001010,
 0b0000001000001010,
 0b0000001000001000,
 0b0000000000001000
}

function title:draw()
 cls()

 srand(127)
 local p=0
 for y=0,23 do
  for x=0,31 do
   local i=min(
    flr((y+rnd(3))/1.1),16
   )
   fillp(fillpats[i+1])
   rectfill(
    x*4,y*4+28,
    x*4+3,y*4+43,13
   )
  end
 end
 fillp()
 
 print("eriban's",48,5,13)
 pal(15,2)
 pal(5,1)
 pal(6,13)
 map(0,21,32,12,8,3)
 for x=0,6 do
  for y=0,1 do
   spr(128+x+y*16,x*8+40,y*8+33)
  end
 end
 pal()

 rectfill(34,60,93,93,0)
 print("[    ] ⬅️➡️",44,63,2)
 print(
  easymode and "easy" or "hard",
  48,63,13
 )
 local y=73+(
  easymode and 0 or 7
 )
 print("⬅️➡️⬆️⬇️ move",37,y,2)
 y+=7
 if easymode then
  print("❎       undo",37,y,2)
  y+=7
 end
 print("❎(hold) retry",37,y,2)

 rectfill(0,121,127,127,5)
 print(
  "press ❎ to start",30,122,0
 ) 

 palt(15,true)
 palt(0,false)

 --draw bubbles
 spr(166,40,106)
 spr(167,81,106)

 --draw car
 local car=self.car
 pal(6,colors[car.c])
 pal(7,hi_colors[car.c])
 spr(
  160+2*(flr(car.x%3)),
  car.x-8,105,
  2,2
 )

 --draw boxes
 local c2=6-car.c
 if easymode then
  pal(colors[c2],lo_colors[c2])
  pal(lo_colors[c2],0)
 else
  pal(colors[c2],4)
  pal(lo_colors[c2],0)
 end

 spr(183,self.boxr.x,113)
 spr(182,self.boxl.x,113)
 pal()
end

game={}
function game:new(level_idx)
 local o=new_object(self)

 o.box_cnt=0
 o.mov_cnt=0
 o.boxes={}
 o.level=level:new(level_idx)
 o.level:add_objects(o)

 return o
end

function game:draw()
 cls()

 self.level:draw(self)
 self.player:draw(self)

 if self.anim!=nil then
  self.anim.draw()
 end
end

function game:update()
 local lvl=self.level
 if self.anim then
  if coinvoke(self.anim) then
   self.anim=nil
  end
 elseif false and btnp(🅾️) then
  start_level(
   lvl.idx%#level_defs+1
  )
 else
  self.player:update(self)

  if lvl:is_done(self) then
   local new_hi=_stats:mark_done(
    lvl.idx,self.mov_cnt
   )
   self.anim=animate_level_done(
    new_hi
   )
  end
 end
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700887788770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000887788770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000400000000400000000000ffffff6666ffffff655555555555555f5555555fffffffffffffffff000000000000000000000000
041111400411114002111120004111000024110000000000fffff655555fffff655555555555555f5555555fffffffffffffffff000000000000000000000000
041111400211112004111140021111100411111000000000ffff65555555fffff5555555555555ff555555f0ffffffffffffffff000000000000000000000000
021651200416514004165140041651144116511000000000fff6555555555fffff55555555555fff55555f00ffffffffffffffff000000000000000000000000
041551400415514002155120411551400115511400000000ff655555555555fffff555555555ffff55555500ffffffffffffffff000000000000000000000000
041111400211112004111140011111200111114000000000f65555555555555fffff5555555fffff55555550ffffffffffffffff000000000000000000000000
021111200411114004111140001114000011420000000000655555555555555ffffff55555ffffff5555555fffffffffffffffff000000000000000000000000
000000000000000000000000000040000004000000000000655555555555555fffffffffffffffff5555555fffffffffffffffff000000000000000000000000
000000000000000000000000000400000000400000000000655555f0000000000655555f6666666600000000065555f000000000000000000000000000000000
044244200424424002442440001142000011140000666600655555f0666666660655555f5555555566666666065555f000000000000000000000000000999900
0111111001111110011111100111114001111120065555f0655555f0555555550655555f5555555555555555065555f000000000000000000000000009444420
0116511001165110011651100116511441165140065555f0655555f0555555550655555f5555555555555555065555f000000000000000000000000009444420
0115511001155110011551104115511004155114065555f0655555f0555555550655555f5555555555555555065555f000000000000000000000000009444420
0111111001111110011111100411111002111110065555f0655555f0555555550655555f5555555555555555065555f000000000000000000000000009444420
044244200424424002442440002411000041110000ffff00655555f0555555550655555fffffffffffffffff065555f000000000000000000000000000222200
000000000000000000000000000040000004000000000000655555f0ffffffff0655555f0000000000000000065555f000000000000000000000000000000000
6666666f666666666666666f6555555f6555555f6555555f666666666666666f6666666f6555555f66666666666666666555555f6555555f6555555f55555555
6555555f655555555555555f655555555555555f6555555f555555556555555f5555555f6555555f65555555555555555555555f555555556555555555555555
6555555f655555555555555f655555555555555f6555555f555555556555555f5555555f6555555f65555555555555555555555f555555556555555555555555
6555555f655555555555555f655555555555555f6555555f555555556555555f5555555f6555555f65555555555555555555555f555555556555555555555555
6555555f655555555555555f655555555555555f6555555f555555556555555f5555555f6555555f65555555555555555555555f555555556555555555555555
6555555f655555555555555f655555555555555f6555555f555555556555555f5555555f6555555f65555555555555555555555f555555556555555555555555
6555555f655555555555555f655555555555555f6555555f555555556555555f5555555f6555555f65555555555555555555555f555555556555555555555555
ffffffff6555555ff555555fffffffffffffffff6555555fffffffff6555555ffffffffffffffffffffffffff555555ff555555fffffffff6555555f55555555
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099900999ffffffff
00aaaa0000aaaa0000aaaa0000aaaa0000aaaa00099009900000000000999900066006600990099008800880033003300cc00cc00660066099900999ffaaaaff
0a9999400a9a99400a9e89400a9b39400a96c94009000090000a900009444440060a9060090a9090080a9080030a90300c0a90c00600006099000099fa99994f
0a9999400aa7a9400ae7e8400ab7b3400a676c400000000000a7a9000944444000a7a90000a7a90000a7a90000a7a90000a7a9000000000000000000fa99994f
0a9999400a9a99400a8e88400a3b33400ac6cc4000000000009a990009444440009a9900009a9900009a9900009a9900009a99000000000000000000fa99994f
0a9999400a9999400a9889400a9339400a9cc940090000900009900009444440060990600909909008099080030990300c0990c00600006099000099fa99994f
0044440000444400004444000044440000444400099009900000000000444400066006600990099008800880033003300cc00cc00660066099900999ff4444ff
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099900999ffffffff
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008880088800000000
00eeee0000eeee0000eeee0000eeee0000eeee00088008800000000000888800066006600990099008800880033003300cc00cc0044004408880088809900990
0e8888200e8a98200e8e88200e8b38200e86c82008000080000e800008222220060e8060090e8090080e8080030e80300c0e80c0040000408800008809000090
0e8888200ea7a9200ee7e8200eb7b3200e676c200000000000e7e8000822222000e7e80000e7e80000e7e80000e7e80000e7e800000000000000000000000000
0e8888200e9a99200e8e88200e3b33200ec6cc2000000000008e880008222220008e8800008e8800008e8800008e8800008e8800000000000000000000000000
0e8888200e8998200e8888200e8338200e8cc820080000800008800008222220060880600908809008088080030880300c0880c0040000408800008809000090
0022220000222200002222000022220000222200088008800000000000222200066006600990099008800880033003300cc00cc0044004408880088809900990
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008880088800000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000666006663330033300000000
00bbbb0000bbbb0000bbbb0000bbbb0000bbbb00033003300000000000333300066006600990099008800880033003300cc00cc0666006663330033300000000
0b3333100b3a93100b3e83100b3b33100b36c31003000030000b300003111110060b3060090b3090080b3080030b30300c0b30c0660000663300003300000000
0b3333100ba7a9100be7e8100bb7b3100b676c100000000000b7b3000311111000b7b30000b7b30000b7b30000b7b30000b7b300000000000000000000000000
0b3333100b9a99100b8e88100b3b33100bc6cc1000000000003b330003111110003b3300003b3300003b3300003b3300003b3300000000000000000000000000
0b3333100b3993100b3883100b3333100b3cc310030000300003300003111110060330600903309008033080030330300c0330c0660000663300003300000000
0011110000111100001111000011110000111100033003300000000000111100066006600990099008800880033003300cc00cc0666006663330033300000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000666006663330033300000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044400444ccc00ccc00000000
00666600006666000066660000666600006666000cc00cc00000000000cccc00066006600990099008800880033003300cc00cc044400444ccc00ccc00999900
06cccc1006ca9c1006ce8c1006cb3c1006c6cc100c0000c00006c0000c1111100606c0600906c0900806c0800306c0300c06c0c044000044cc0000cc09444420
06cccc1006a7a91006e7e81006b7b31006676c100000000000676c000c11111000676c0000676c0000676c0000676c0000676c00000000000000000009444420
06cccc10069a9910068e8810063b331006c6cc100000000000c6cc000c11111000c6cc0000c6cc0000c6cc0000c6cc0000c6cc00000000000000000009444420
06cccc1006c99c1006c88c1006c33c1006cccc100c0000c0000cc0000c111110060cc060090cc090080cc080030cc0300c0cc0c044000044cc0000cc09444420
00111100001111000011110000111100001111000cc00cc00000000000111100066006600990099008800880033003300cc00cc044400444ccc00ccc00222200
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044400444ccc00ccc00000000
000ee00000000000000ee000000ee000000ee0000000000000000000ddddddd2ddddddd2ddd2ddd2ddddddd20000000000000000000000000000000000000000
00e882000000000000e8820000e8820000e882000000000000000000d1111112d1111112d112d112d11111120ee00000000ee000ee000ee00000000000000000
0e888820000000000e8888200e8888200e8888200000000000000000d1111112d1111112d112d112d1111112e880000000e8800e8800e8820000000000000000
0e8888200000000eee8888200e8888200e888820000eeeee00000000d1112222d1111112d1121112d1111112e88000ee0ee8800e8800e8820ee0000000000000
0e888820000ee0e8828888200e8888200e88882000e8888820000000d1112dd2d1122112d1111112d1122112e88ee08808828eee88eee882e888000000000000
0e88882220e88288882888222e8888222e8888200e88888882000000d1111112d112d112d1111122d112d112e888882828828888288882828828200000000000
0e88828882888828882882888288828882888820e888828882000000d1111112d112d112d1111122d112d112e888882828828888288882828888200000000000
0e88888888288828882888888828888888288820e8882e8882000000d2221112d112d112d1111112d112d112e882882828828288282882828822000000000000
0e88888888288828882888888828888888288820e888888820000000dddd1112d1111112d1121112d1111112e888882888828888288882882888200000000000
0e88822888288828882882288828822888288ee2e888888820000000d1111112d1111112d112d112d11111120888828888288882888828882888200000000000
0e8882e888288828882882e8882882e8882888882888822282000000d1111112d1111112d112d112d11111120022200222002220022200220222000000000000
0e888888828888888828888882888888828888882888888882000000222222222222222222222222222222220000000000000000000000000000000000000000
0e888888828888888288888882888888828888882888888820000000000000000000000000000000000000000000000000000000000000000000000000000000
00888882208888822088888220888882208888820888882200000000000000000000000000000000000000000000000000000000000000000000000000000000
00022220000222200002222000022220000222200022220000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffffffffffffffffffffffffffffffffffffffffffffffffffcccfffff888fff0000000000000000000000000000000000000000000000000000000000000000
fffffffffffffffffffffffffffffffffffffffffffffffffc6cccfff8e888ff0000000000000000000000000000000000555555555555000000000000000000
ffffffffffffffffffffffffffffffffffffffffffffffffc676cc1f8e7e882f0000000000000000000000000000000000555555555555000000000000000000
ffffffffffffffffffffffffffffffffffffffffffffffffcc6ccc1f88e8882f0000000000000000000000000000000000000000000000000000000000000000
ffffffffffffffffffffffffffffffffffffffffffffffffcccccc1f8888882f0000000000000000000000000000000000555550000055000000000000000000
fffffffffffffffffffffffffffffffffffffffffffffffffcccc1fff88882ff0000000000000000000000000000000000000000000000000000000000000000
ffffffffffffffffffffffffffffffffffffffffffffffffff111fffff222fff0000000000000000000000000000000000555555500055000000000000000000
fffffff66ffffffffffffff66ffffffffffffff66fffffffffffffffffffffff0000000660000000000000066000000000000000000000000000000000000000
ffffff7666ffffffffffff7666ffffffffffff7666ffffffffffffffffffffff0000007666000000000000766600000000555550000055000000000000000000
fffff766666ffffffffff766666ffffffffff766666fffffcccccccf8888888f0000076666600000000007666660000000000000000000000000000000000000
f00000000000000ff00000000000000ff00000000000000fc1c1c1cf8282828f0111111111111110011111111111111000555555000055000000000000000000
f04044044044040ff04404404404400ff00440440440440fc1c1c1cf8282828f0144144144144110011441441441441000000000000000000000000000000000
f45550000005554ff05550000005554ff45550000005550fc1c1c1cf8282828f0155511111155540045551111115551000000000000000000000000000000000
f05050000005050ff45050000005054ff45050000005054fc1c1c1cf8282828f0450511111150540045051111115054000000000000000000000000000000000
f4555ffffff5554ff4555ffffff555ffff555ffffff5554fc1c1c1cf8282828f0455500000055500005550000005554000000000000000000000000000000000
ff4f44f44f44f4fffff44f44f44f44ffff44f44f44f44fffcccccccf8888888f0004404404404400004404404404400000000000000000000000000000000000
55555555555555555555555555555555555555555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000
55dddd5555dddd5555cccc5555cccc555566665555cccc5500000000000000000000000000000000000000000000000000000000000000000000000000000000
5dcccc155d1111055c1111255c11110556cccc155cdddd1500000000000000000000000000000000000000000000000000000000000000000000000000000000
5dcccc155d1111055c1111255c11110556cccc155cdddd1500000000000000000000000000000000000000000000000000000000000000000000000000000000
5dcccc155d1111055c1111255c11110556cccc155cdddd1500000000000000000000000000000000000000000000000000000000000000000000000000000000
5dcccc155d1111055c1111255c11110556cccc155cdddd1500000000000000000000000000000000000000000000000000000000000000000000000000000000
55111155550000555522225555000055551111555511115500000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555555555555555555555555555555555555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555550000000000000000555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000055cccc55000000000000000055dddd550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005cdddd1500000000000000005dcccc150000000000000000000dd0000000000000000000000000000000000000000000000000000000000000000000
000000005cdddd1500000000000000005dcccc15000000000000000000dcdd000000000000000000000000000000000000000000000000000000000000000000
000000005cdddd1500000000000000005dcccc15000000000000000000dddd000000000000000000000000000000000000000000000000000000000000000000
000000005cdddd1500000000000000005dcccc150000000000000000000dd0000000000000000000000000000000000000000000000000000000000000000000
00000000551111550000000000000000551111550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555550000000000000000555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000cc0000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000cdcc000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000cccc000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000cc0000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000cc0000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000c6cc000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000cccc000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000cc0000000000000000000000000000000000000000000000000000000000000000000
__label__
ddddddddddddddddddddddddddddddd2ddddddddddddddddddddddddddddddd2ddddddddddddddd2ddddddddddddddd2ddddddddddddddddddddddddddddddd2
dddddddddddddddddddddddddddddd22dddddddddddddddddddddddddddddd22dddddddddddddd22dddddddddddddd22dddddddddddddddddddddddddddddd22
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111222222222222222222dd111111111111222211111111111122dd11111111111122dd11111111111122dd111111111111222211111111111122
dd111111111111222222222222222222dd111111111111222d11111111111122dd11111111111122dd11111111111122dd111111111111222d11111111111122
dd11111111111122ddddddddddddddd2dd11111111111122dd11111111111122dd11111111111122d111111111111122dd11111111111122dd11111111111122
dd1111111111112ddddddddddddddd22dd11111111111122dd11111111111122dd1111111111112d1111111111111122dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111211111111111111122dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111220dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111112200dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111122000dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111220000dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111200000dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111100000dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111000dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111100dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111120dd11111111111122dd11111111111122
dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111211111111111111122dd11111111111122dd11111111111122
d2222222222222222211111111111122dd11111111111122dd11111111111122dd111111111111221111111111111122dd11111111111122dd11111111111122
22222222222222222d11111111111122dd11111111111122dd11111111111122dd11111111111122d111111111111122dd11111111111122dd11111111111122
dddddddddddddddddd11111111111122dd11111111111122dd11111111111122dd11111111111122dd11111111111122dd11111111111122dd11111111111122
dddddddddddddddddd11111111111122dd1111111111112ddd11111111111122dd11111111111122dd11111111111122dd1111111111112ddd11111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd111111111111111111111111111122dd111111111111111111111111111122dd11111111111122dd11111111111122dd111111111111111111111111111122
dd11111111111111111111eeee111122dd11111111111111111111eeee111122dd1111eeee111122dd1111eeee111122dd111111111111111111111111111122
dd1111111111111111111eee88811122dd1111111111111111111eee88811122dd111eee88811122dd111eee88811122dd111111111111111111111111111122
d2222222222222222222eee888822222d2222222222222222222eee888822222d222eee888822222d222eee888822222d2222222222222222222222222222222
2222222222222222222eee88888822222222222222222222222eee8888882222222eee8888882222222eee888888222222222222222222222222222222222222
0000000000000000000ee888888822000000000000000000000ee88888882200000ee88888882200000ee8888888220000000000000000000000000000000000
000000000000000000eee88888882200000000000000000000eee8888888220000eee8888888220000eee8888888220000000000000000000000000000000000
000000000000000000ee88888888220000000000000000eeeeee88888888220000ee88888888220000ee8888888822000000000eeeeeeee00000000000000000
000000000000000000ee8888888822000000000000000ee888ee88888888220000ee88888888220000ee88888888220000000eeee88888880000000000000000
000000000000000000ee888888882200000000eeee00ee88888e88888888220000ee88888888220000ee8888888822000000eee8888888882000000000000000
000000000000000000e888888888220000000ee88880e888888888888888220000e888888888220000e8888888882200000eee88888888888200000000000000
000000000000000000e88888888822000000ee8888828888888828888888220000e888888888220000e888888888220000eee888888888888820000000000000
000000000000000000e88888888222eee200e8888888288888882288888222eee2e88888888222eee2e88888888822000eee8888888888888822000000000000
000000000000000000e88888882228888822e888888822888888228888222888882288888822288888228888888822000ee88888882888888822000000000000
000000000000000000e88888882288888882288888882288888822888822888888822888882288888882288888882200eee88888822288888822000000000000
000000000000000000e88888888888888888228888882288888822888888888888882288888888888888228888882200ee888888222e88888822000000000000
000000000000000000e88888888888888888228888882288888822888888888888882288888888888888228888882200ee88888882e888888222000000000000
000000000000000000e88888888888888888228888882288888822888888888888882288888888888888228888882200e8888888888888888220000000000000
000000000000000000e88888888888888888228888882288888822888888888888882288888888888888228888882200e8888888888888882220000000000000
000000000000000000e88888888228888888228888882288888822888882288888882288888228888888228888882ee2e8888888888888882200000000000000
000000000000000000e8888888222288888822888888228888882288882222888888228888222288888822888882888228888888888888222200000000000000
000000000000000000e8888888222e8888882288888822888888228888222e888888228888222e88888822888888888822888888222222288820000000000000
000000000000000000e888888882e8888882228888882888888222888882e888888222888882e888888222888888888882288888882288888822000000000000
000000000000000000e8888888888888888222888888888888822288888888888882228888888888888222888888888882288888888888888822000000000000
000000000000000000e8888888888888882228888888888888222888888888888822288888888888882228888888888882288888888888888822000000000000
000000000000000000e8888888888888882228888888888888222888888888888822288888888888882228888888888822288888888888888222000000000000
00000000000000000008888888888888822288888888888882228888888888888222888888888888822288888888888822288888888888888220000000000000
00000000000000000008888888888888222088888888888822208888888888882220888888888888222088888888888222888888888888882220000000000000
00000000000000000000888888888822220088888888882222008888888888222200888888888822220088888888882220888888888888222200000000000000
00000000000000000000088888882222000008888888222200000888888822220000088888882222000008888888222200088888888822220000000000000000
00000000000000000000002222222200000000222222220000000022222222000000002222222200000000222222220000002222222222000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000888882000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000088888888820000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000088ee88888822000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000008e66e8888882000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000088e6ee8888882200000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000888ee88888882200000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000008888888888882200000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000008888888888882200000000000000000000000000000000000000000
00000000000000000000000000000777777660000000000000000000000000000000000008888888888822200000000000000000000000000000000000000000
00000000000000000000000000077776666666600000000000000000000000000000000002888888888822200000000000000000000000000000000000000000
00000000000000000000000007777666666666666000000000000000000000000000000000888888888222000000000000000000000000000000000000000000
00000000000000000000000077776666666666666600000000000000000000000000000000228888822222000000000000000000000000000000000000000000
00000000000000000000000777766666666666666660000000000000000000000000000000022222222220000000000000000000000000000000000000000000
00000000000000000000000777666666666666666660000000000000000000000000000000000222222000000000000000000000000000000000000000000000
00000000000000000000007776666666666666666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000007776666666666666666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000077766666666666666666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000077766666666666666666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000077766666666666666666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000077766666666666666666666600000000000000000000000000000000000000000000000000000004444444444444444444444400000
00000001111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000004444444444444444444444400000
00000011111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000004444444444444444444444400000
00000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000004444444444444444444444400000
00000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000004440000000000000000044400000
00000111111111111444444441111444444441111444444441111111111110000000000000000000000000000000000000004440444044404440444044400000
00000111111411111444444441111444444441111444444441111141111110000000000000000000000000000000000000004440444044404440444044400000
00000111144411111444444441111444444441111444444441111144411110000000000000000000000000000000000000004440444044404440444044400000
00000111444441111444444441111444444441111444444441111444441110000000000000000000000000000000000000004440444044404440444044400005
00000114444445555111111111111111111111111111111115555444444110000000000000000000000000000000000000004440444044404440444044400000
00000114444555555551111111111111111111111111111555555554444110000000000000000000000000000000000000004440444044404440444044400000
00000144445555555555111111111111111111111111115555555555444410000000000000000000000000000000000000004440444044404440444044400000
00000111445555555555111111111111111111111111115555555555441110000000000000000000000000000000000000004440444044404440444044400000
00000111155555005555511111111111111111111111155555005555511110000000000000000000000000000000000000004440444044404440444044400000
00000111155550000555511111111111111111111111155550000555511110000000000000000000000000000000000000004440444044404440444044400000
00000011155550000555511111111111111111111111155550000555511100000000000000000000000000000000000000004440444044404440444044400000
00000001155555005555511111111111111111111111155555005555511000000000000000000000000000000000000000004440444044404440444044400000
00000000445555555555000000000000000000000000005555555555440000000000000000000000000000000000000000004440444044404440444044400000
00000044445555555555000000000000000000000000005555555555444400000000000000000000000000000000000000004440444044404440444044400000
00000004444555555550000000000000000000000000000555555554444000000000000000000000000000000000000000004440000000550000000044400000
00000004444445555000000000000000000000000000000005555444444000000000000000000000000000000000000000004444444444444444444444400000
00000000444440000444444440000444444440000444444440000444440000000000000000000000000000000000000000004444444444444444444444400000
00000000044400000444444440000444444440000444444440000044400000000000000000000000000000000000000000004444444444444444444444400000
00000000000400000444444440000444444440000444444440000040000000000000000000000000000000000000000000004444444444444444444444400000

__gff__
0000000000000000000000000000000001010100000002020202020203000000010101000002020202020202000000020202020202020202020202020202020204141414140810041818181818080806041414141408100418181818180808090414141414081004181818181808080004141414140810041818181818080802
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004040404040400000000000000000000000400000400001000000000000000000000000000000010000000000000000000000000000000100000000000000000
__map__
313636363636363231363636363636323136363636363632163636363636361716363636363636171b3136363636321b1636363636363617313636363636363231363601013636321636360101363617163636363636361700000000000000000000000000000000000000000000000000000000000000000000000000000000
35100000000000353555000025006535351000000000003535460045450056353525000046002535313400004600333235750000000075353510000000006b3535100000000065353510000000000035351000000000003500000000000000000000000000000000000000000000000000000000000000000000000000000000
3500000000000035350010600000003535000000000000353500107070000035351060010170003535106000007000353500557070550035350050507070653535005050707065353500700000500035350040000070003500000000000000000000000000000000000000000000000000000000000000000000000000000000
3500005000702f353525005676400035357550765670553535655000006055353500006a79000035350000554500003535007010565000353500000000003a3c3e380000000066353500700000500035350062000054003500000000000000000000000000000000000000000000000000000000000000000000000000000000
35000070000000353500506646002535357550765670553535655000006055353500007565000035333276756566003535007076005000353e380060600000353576006060003a3c3500007656000035350000000000003500000000000000000000000000000000000000000000000000000000000000000000000000000000
350000540075553535000000700000353500000000000035350000404000003535004000005000351b354000005000353500755050750035357500000000003535750000000000351832005575003119183275554565311900000000000000000000000000000000000000000000000000000000000000000000000000000000
3556002f0055753535450025000075353500000000000035356600757500763535250056000025351b350000560031343555000000005535357c000037555a3535750037565555351b3500557500351b1b3500466600351b00000000000000000000000000000000000000000000000000000000000000000000000000000000
333636363636363433363636363636343336363636363634183636363636361918363636363636191b3336363636341b1836363636363619333636363d3636343336363d363636341b1836363636191b1b1836363636191b00000000000000000000000000000000000000000000000000000000000000000000000000000000
3136363636363231363b363b363231292929292932313636363636363200000000000000313636363636363231363636321b1b1b31363636363632313636363636363200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3500560000003535753976397535260000000000283510000000000035000000000000003510000000000035350000003336363235100000707535351000000000003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3500370037703535000000000035260010604000283575507656705535000000000000003500705a5c5000353500005000007535357500007000353500705a5c50003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
351026762b4d2835700010005035260050660056283575507656705535000000000000003500707a7c5000353e38763056563a3c357601017075353500707a7c50003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
350033273d2a3c35000000000035260070004d4d283500000000000035000000000000003500000000000035351050007000553535750000700035350070557550003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
35005000004d2835553756375535260000764d48283500000000000035000000000000001832000000003119350000000000553535000000707535350070755550003500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3336363636273433363d363d3634332727272727343336363636363634000000000000001b3336363636341b333636363636363433363636363634183636363636361900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3a3b383737313831363636363636363200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b355f3e3c3e38355a0050007000753500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b3900393933383e3800001000003a3c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
31383117311737357c0050007000553500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3e38353535353933320000000000313400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3338393933194f1b333636363636341b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3138313237373132000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
333235353e1a3535000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3a34333439393334000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100003001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200001a0501a020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001400001c05018050100501005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00040000295502d550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000001c72026730307403075000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000300001e5102b5411e5110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
